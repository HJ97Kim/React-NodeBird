{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, delay, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/gimhyeongjin/Desktop/React-NodeBird/prepare/front/sagas/post.js"],"names":["axios","all","fork","delay","put","takeLatest","throttle","call","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","likePostAPI","data","patch","likePost","action","result","type","err","response","unlikePostAPI","delete","unlikePost","loadPostsAPI","get","loadPosts","addPostAPI","post","content","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","console","error","watchLikePost","watchUnlikePost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { all, fork, delay, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport {\n  LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST,\n  ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST,\n  REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST,\n  ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST,\n  LIKE_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST,\n  UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', { content: data });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchLikePost),\n    fork(watchUnlikePost),\n    fork(watchAddPost),\n    fork(watchLoadPosts),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}