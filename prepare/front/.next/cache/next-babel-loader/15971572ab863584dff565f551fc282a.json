{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, delay, put, takeLatest } from 'redux-saga/effects';\nimport shortId from 'shortid';\nimport { LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, generateDummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/post', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    console.lof(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000); // const result = yield call(addCommentAPI, action.data);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/gimhyeongjin/Desktop/React-NodeBird/prepare/front/sagas/post.js"],"names":["axios","all","fork","delay","put","takeLatest","shortId","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","type","err","console","lof","response","addPostAPI","post","addPost","id","generate","content","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { all, fork, delay, put, takeLatest } from 'redux-saga/effects';\nimport shortId from 'shortid';\nimport {\n  LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST,\n  ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST,\n  REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST,\n  ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, generateDummyPost,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/post', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (err) {\n    console.lof(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchLoadPosts),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}