{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '김형진'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://lh3.googleusercontent.com/proxy/0j4sm2-q8RxyWOfAlOV7_6fnDuV30spB67hpnDljssDUIs594XCylBMpHfJtv7ZGO9P6c8_PBBd2UY59nOzcywPxytJwu-o4Il4qdPFx5a1fuPGGSQ'\n    }, {\n      src: 'https://lh3.googleusercontent.com/proxy/0j4sm2-q8RxyWOfAlOV7_6fnDuV30spB67hpnDljssDUIs594XCylBMpHfJtv7ZGO9P6c8_PBBd2UY59nOzcywPxytJwu-o4Il4qdPFx5a1fuPGGSQ'\n    }, {\n      src: 'https://lh3.googleusercontent.com/proxy/0j4sm2-q8RxyWOfAlOV7_6fnDuV30spB67hpnDljssDUIs594XCylBMpHfJtv7ZGO9P6c8_PBBd2UY59nOzcywPxytJwu-o4Il4qdPFx5a1fuPGGSQ'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'maru'\n      },\n      content: '너무 귀여워요~'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = data = {\n  id: 2,\n  content: data,\n  User: {\n    id: 1,\n    nickname: '김형진'\n  },\n  Images: [],\n  Comments: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentDone: true\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/gimhyeongjin/Desktop/React-NodeBird/prepare/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","reducer","state","action","error"],"mappings":"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","sourcesContent":["export const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '김형진',\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://lh3.googleusercontent.com/proxy/0j4sm2-q8RxyWOfAlOV7_6fnDuV30spB67hpnDljssDUIs594XCylBMpHfJtv7ZGO9P6c8_PBBd2UY59nOzcywPxytJwu-o4Il4qdPFx5a1fuPGGSQ',\n    }, {\n      src: 'https://lh3.googleusercontent.com/proxy/0j4sm2-q8RxyWOfAlOV7_6fnDuV30spB67hpnDljssDUIs594XCylBMpHfJtv7ZGO9P6c8_PBBd2UY59nOzcywPxytJwu-o4Il4qdPFx5a1fuPGGSQ',\n    }, {\n      src: 'https://lh3.googleusercontent.com/proxy/0j4sm2-q8RxyWOfAlOV7_6fnDuV30spB67hpnDljssDUIs594XCylBMpHfJtv7ZGO9P6c8_PBBd2UY59nOzcywPxytJwu-o4Il4qdPFx5a1fuPGGSQ',\n    }],\n    Comments: [{\n      User: {\n        nickname: 'maru',\n      },\n      content: '너무 귀여워요~',\n    }],\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n};\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nconst dummyPost = (data) = ({\n  id: 2,\n  content: data,\n  User: {\n    id: 1,\n    nickname: '김형진',\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return {\n        ...state,\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null,\n      };\n    case ADD_POST_SUCCESS:\n      return {\n        ...state,\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true,\n      };\n    case ADD_POST_FAILURE:\n      return {\n        ...state,\n        addPostLoading: false,\n        addPostError: action.error,\n      };\n    case ADD_COMMENT_REQUEST:\n      return {\n        ...state,\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null,\n      };\n    case ADD_COMMENT_SUCCESS:\n      return {\n        ...state,\n        addCommentLoading: false,\n        addCommentDone: true,\n      };\n    case ADD_COMMENT_FAILURE:\n      return {\n        ...state,\n        addCommentLoading: false,\n        addCommentError: action.error,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}